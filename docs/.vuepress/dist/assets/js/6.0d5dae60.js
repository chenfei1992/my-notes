(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{351:function(t,a,s){t.exports=s.p+"assets/img/640.2a64049a.png"},379:function(t,a,s){"use strict";s.r(a);var n=s(42),v=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"native-端体验优化"}},[t._v("Native 端体验优化")]),t._v(" "),n("p",[t._v("基本特质：")]),t._v(" "),n("ul",[n("li",[t._v("启动速度快")]),t._v(" "),n("li",[t._v("交互流畅不卡顿")]),t._v(" "),n("li",[t._v("有离线缓存")]),t._v(" "),n("li",[t._v("支持弱网环境")]),t._v(" "),n("li",[t._v("友好的用户提示")])]),t._v(" "),n("h3",{attrs:{id:"内存优化"}},[t._v("内存优化")]),t._v(" "),n("p",[t._v("内存的优化首先要避免大量的内存泄漏，可以使用leakcanary进行自动检测，若要深入分析，可以使用AndroidStudio手动dump内存下来用MAT工具进行分析，发现其中潜在的内存泄漏对象。其次是尽量使用成熟的图片开源框架，如Glide或者Picasso等展示图片或者Gif。\n内存抖动：出现的原因一般是大量频繁的创建对象，导致频繁触发GC,以至于App使用卡顿，比如常见的场景是在自定义控件的onDraw方法创建对象，因为onDraw方法会频繁调用，在onDraw方法中创建大对象会导致内存急剧增长，触发GC导致卡顿。因此要尽量避免在循环体中创建对象，可以考虑使用对象池一次创建多处复用来规避内存抖动。")]),t._v(" "),n("h3",{attrs:{id:"ui-渲染优化"}},[t._v("UI 渲染优化")]),t._v(" "),n("p",[t._v("UI渲染性能关系到APP的流畅度，16ms内存未能完成一次绘制就会出现掉帧，给人感觉就是页面卡顿，响应不及时。移动端上导致渲染性能下降的原因和解决的一般套路：")]),t._v(" "),n("h4",{attrs:{id:"布局不合理"}},[t._v("布局不合理")]),t._v(" "),n("p",[t._v("布局要避免不必要嵌套，以使用Hierarchy View进行辅助查看布局层级关系，来识别嵌套是否合理；同时要根据具体场景合理使用哪一种布局，如RelativeLayout不能滥用，对于复杂布局可以用ConstaintLayout代替；此外还可以使用viewstub进行延迟加载布局，用merge和include进行布局复用。")]),t._v(" "),n("h4",{attrs:{id:"过度绘制（overdraw）"}},[t._v("过度绘制（overdraw）")]),t._v(" "),n("p",[t._v("过度绘制的出现是因为在重叠的层级结构中，一些不可见的部分因为某些原因，如设置了背景色，也会出现在绘制操作中，导致这块重叠区域的像素被多次绘制，那明显是浪费计算资源。可以使用简单方法识别过度绘制是否严重，在Android系统中开发主菜单里面打开「调式GPU过度绘制」开关就能看到界面UI元素被不同的颜色块标注")]),t._v(" "),n("h2",{attrs:{id:"垃圾回收"}},[t._v("垃圾回收")]),t._v(" "),n("h3",{attrs:{id:"垃圾数据的产生"}},[t._v("垃圾数据的产生")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("当JavaScript在执行这段代码的时候，栈中保存了a对象的指针，顺着这个指针可以到达a对象，通过a对象可以达到test对象\n如果这个时候，创建一个新的对象赋给a的test属性")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("这时，之前定义的数组与a.test之间的关系断掉了，没有办法从根对象遍历到这个Array对象，这个Array也不再被需要。这样就产生了垃圾数据\n其实，不论是什么程序语言，内存声明周期基本是一致的：\n1.分配你所需要的内存\n2.使用分配到的内存（读、写）\n3.不需要的时候将其释放\n所有语言的第二部分都是明确的，而第一和第三部分在底层语言是明确的，像是C语言，可以通过malloc()和free()来分配和销毁这些内存，如果\n一段数据不再需要了，有没有主动调用free()函数来释放，会造成内存泄漏的问题。但是像是在JavaScript这些高级语言中，这两部分基本上是隐含的。\n我们称C语言这种由代码控制何时分配、销毁内存的策略成为手动垃圾回收。而像是JavaScript、Java等隐藏第一三部分，产生的垃圾数据由垃圾回收器释放的策略成为自动垃圾回收。")]),t._v(" "),n("h3",{attrs:{id:"调用栈中的垃圾回收"}},[t._v("调用栈中的垃圾回收")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("showName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("showName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("有一个记录当前执行状态的指针（称为ESP）指向调用栈中的函数执行上下文。当函数执行完成之后，就需要销毁函数的执行上下文了，这时候，ESP就帮上忙了，JavaScript会将ESP下移到后面的函数执行上下文，这个下移的过程就是销毁当前函数执行上下文的过程。\n"),n("img",{attrs:{src:s(351),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"堆中的垃圾回收"}},[t._v("堆中的垃圾回收")]),t._v(" "),n("p",[t._v("与栈中的垃圾回收不同的是，栈中无效的内存会被直接覆盖掉，而堆中的垃圾回收需要使用 JavaScript 中的垃圾回收器。\n垃圾回收一般分为下面的几个步骤：")]),t._v(" "),n("ul",[n("li",[t._v("通过 GC Root 标记空间中的活动对象和非活动对象\n目前 V8 采用 可访问性(reachablility)算法来判断堆中的对象是否为活动对象。这个算法其实就将一些 GC Root 作为初始存活对象的集合，从 GC Root 对象触发，遍历 GC Root 中的所有对象。\n"),n("ul",[n("li",[t._v("能够通过 GC Root 遍历到的对象会被认为是可访问的，我们将其标记为活动对象，必须保留")]),t._v(" "),n("li",[t._v("如果一个对象无法通过 GC Root 遍历到，那么就认为这个对象是不可访问的，可能需要被回收，并标记为非活动对象。\n在浏览器环境中 GC Root通常包括并不限于以下几种：")])])]),t._v(" "),n("li",[t._v("全局 wimdow 对象(位于每个 iframe 中)")]),t._v(" "),n("li",[t._v("文档 DOM 树,由可以通过遍历文档到达所有原生 DOM 节点组成")]),t._v(" "),n("li",[t._v("存放栈上的变量。")]),t._v(" "),n("li",[t._v("回收非活动对象所占据的内存")]),t._v(" "),n("li",[t._v("内存整理。一般情况下，频繁回收对象后，内存中会产生大量不连贯的空间，及内存碎片，如果在此时需要分配大的连续内存的时候，就有可能产生内存不足的现象，所以需要在最后做一下内存整理的工作。不过有的垃圾回收器并不会产生内存碎片，所以这一步是选的。\n在垃圾回收领域有一个重要的术语—代际假说，它有以下两个特点：\n1.大部分对象在内存中存在的时间很短，比如说函数内部的变量，或者块级作用域中的变量，当函数或块级代码块执行结束时，作用域内部定义的变量也会被销毁，这一类对象被分配内存后，很快就会变得不可用。\n2.只要不死的对象，都会持续很久的存在，比如说 window、DOM、Web API 等。\n既然代际假说将对象大致分为两种，长寿的和短命的，垃圾回收也顺势把堆分为新生代和老生代两块区域，短命对象存放在新生代中，反正新生代中的对象都是短命鬼，那么就没有必要分配很大的内存就管理这一块儿区域，所以新生代一般只支持 1~8M 的容量【当然，最重要的是执行效率的原因，之后会详细讲到】，那么长寿的对象放到哪里呢？老生代存放那些生存时间久的对象，与新生代相比，老生代支持的容量就大的多很多了。\n既然非活动对象都存放在了两块区域，V8 也就分别使用了两个不同的垃圾回收器来高效的实施垃圾回收：")]),t._v(" "),n("li",[t._v("副垃圾回收器，主要负责新生代的垃圾回收。")]),t._v(" "),n("li",[t._v("主垃圾回收器，主要负责老生代的垃圾回收。")])]),t._v(" "),n("h3",{attrs:{id:"副垃圾回收器"}},[t._v("副垃圾回收器")]),t._v(" "),n("p",[t._v("通常情况下，大多数小的对象都会被分配到新生区，虽然这个区域不大，但是垃圾回收还是进行的非常频繁的。\n新生代中采用 Scavenge 算法 处理，就是把新生代空间对半分为对象区域和空闲区域，新加入的对象会放到对象区域，当新生代区域快要被写满的时候就会执行一次垃圾清理的操作。\n在垃圾回收的过程中，首先对对象区域做垃圾标记，标记完成后，副垃圾回收器会把存活的对象复制到空闲区域中，同时会把这些对象有序的排列起来，相当于是完成了内存整理的工作，复制后的空闲区域没有内存碎片了。完成复制之后，对象区域与空闲区域会进行角色翻转，这样就完成了垃圾回收的操作。这种角色翻转的操作还能让新生代中的这两块区域无限重复使用下去。\n每次执行清理操作，都需要将存活的对象区域复制到空闲区域，复制操作需要时间成本，新生区空间设置的越大，那么每次清理的时间也就会越长，所以说，为了执行效率，一般新生区的空间都会设置的很小。\n因为新生区空间不大，所以很容易就会被存活对象填满整个区域，这个时候应该怎么办呢？JavaScript 引擎为了解决这个问题，采用了对象晋升策略，简单的讲，就是经过两次垃圾回收依然存活的对象就会被移动到老生区。")]),t._v(" "),n("h3",{attrs:{id:"主垃圾回收器"}},[t._v("主垃圾回收器")]),t._v(" "),n("p",[t._v("前面我们提到了，主垃圾回收器主要是负责老生区的垃圾回收，除了新生区晋升的对象，一些大的对象会被直接分配到老生区。所以老生区的对象一般有两个特点：")]),t._v(" "),n("ul",[n("li",[t._v("对象占用空间大")]),t._v(" "),n("li",[t._v("对象存活时间长\n面对这种类型的对象，再使用新生区的 Scavenge 算法进行垃圾回收显然就不合理了，不仅复制对象时间要花费的长，还会浪费一半的空间。因此，主垃圾回收器采用 标记-清除(Mark-Sweep) 的算法进行垃圾回收的。\n既然是标记-清除，那么第一步就是进行标记，从一组根元素开始递归这组根元素，在这个遍历过程中，能够到达的元素为活动对象，到达不了的元素可以判断为非活动对象，也就是垃圾数据。\n第二步就是进行清除，下面是一个简单的图例，这个清除的过程可以理解为是将灰色的部分清除掉：\n如果对一块内存进行多次的标记-清除算法，就是产生大量的内存碎片，这样会导致如果有一个对象需要一块大的连续的内存出现内存不足的情况。为了解决这个问题，于是又引入了另一种算法：标记-整理(Mask-Compact)。\n标记-整理 与 标记-清除 算法中，标记的步骤是一样的，只是后续不是直接对垃圾数据清理，而是先将所有存活的对象向一端移动，然后直接清理掉这一端以外的内存，")])]),t._v(" "),n("h3",{attrs:{id:"优化垃圾回收器的执行效率"}},[t._v("优化垃圾回收器的执行效率")]),t._v(" "),n("p",[t._v("JavaScript 是运行在主线程之上的，因此，一旦执行垃圾回收算法，需要将正在执行的 JavaScript 脚本暂停下来，待垃圾回收完毕之后再恢复脚本执行，我们把这个行为称之为 全停顿(Stop-The-World)。\n全停顿会带来什么问题呢？比如说，现在页面正在执行一个 JavaScript 动画，这时候执行垃圾回收，如果这个垃圾回收执行的时间很长，打个比方，200ms，那么在这200ms内，主线程是没有办法进行其他工作的，动画也就无法执行，这样就会造成页面卡顿的现象出现。")]),t._v(" "),n("p",[t._v("为了解决全停顿带来的用户体验的问题，V8 团队进行多年的努力，向现有的垃圾回收器添加并行、并发和增量等垃圾回收技术，这些技术主要是从两个方面解决垃圾回收效率的问题：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("1.既然一个大任务执行需要花费很长时间，那么就把它拆分成多个小任务去执行。\n2.将标记、移动对象等任务转移到后台线程进行。这样大大减少主线程暂停的时间，改善页面卡顿的问题。\n")])])]),n("h3",{attrs:{id:"并行回收"}},[t._v("并行回收")]),t._v(" "),n("p",[t._v("既然主线程执行一次完整的垃圾回收比较耗时，这时大家就会不自觉的想到，在主线程执行任务的时候多开几个辅助线程来并行处理，这样速度不就会加快很多吗？因此，V8 引入了并行回收机制，为孤军奋战苦哈哈执行垃圾回收的主线程搬来了救兵。")]),t._v(" "),n("p",[t._v("采用并行回收时，垃圾回收所消耗的时间，等于总时间除以参与线程的数量，再加上一些同步开销的时间。其实，现在仍然是一种全停顿的垃圾回收模式，在执行垃圾回收的过程中，主线程并不会同步执行 JavaScript 代码，因此，JavaScript 代码不会改变回收的过程，所以我们可以假定内存状态是静态的，只需要保证同时只有一个协助线程在访问对象就好了。")]),t._v(" "),n("p",[t._v("V8 的副垃圾回收器就是采用的这种策略，在执行垃圾回收的过程中同时开启多个辅助线程来对新生代进行垃圾清理的工作，这些线程同时将对象中的数据移动到空闲区域，由于数据地址发生了改变，所以还需要同步更新引用这些对象的指针。")]),t._v(" "),n("h3",{attrs:{id:"增量回收"}},[t._v("增量回收")]),t._v(" "),n("p",[t._v("老生代中一般存放着比较大的对象，比如说window、DOM等，采用并行回收完整的执行垃圾回收依然需要很长时间，这样依然会出现之前提到的动画卡顿的现象，这个时候，V8又引入了增量标记的方式，我们把这种垃圾回收的方式称为"),n("b",[t._v("增量垃圾回收")]),t._v("\n增量垃圾回收就是垃圾收集器将标记工作分成更小的块穿插在主线程的不同任务之间执行。这样，垃圾回收器就没有必要一次执行完整的垃圾回收过程，只要每次执行其中的一小部分工作就可以了")]),t._v(" "),n("p",[t._v("增量回收也是并发执行的，所以这比全停顿要复杂的多，想要实现增量回收，必须要满足以下两点：")]),t._v(" "),n("ol",[n("li",[t._v("垃圾回收可以随时暂停和重启，暂停时需要保存当时扫描的结果，等下一波垃圾回收来了才能继续启动。")]),t._v(" "),n("li",[t._v("在暂停期间，如果被标记好的数据被 JavaScript 修改了，那么垃圾回收器需要能够正确的处理。")])]),t._v(" "),n("p",[t._v("为了能够实现垃圾回收的暂停和恢复执行。V8 采用了三色标记法(黑白灰)来标记数据：")]),t._v(" "),n("ol",[n("li",[t._v("黑色表示这个节点被GC Root引用到了，而且这个节点的子节点已经标记完成了。")]),t._v(" "),n("li",[t._v("灰色表示这个节点被GC Root引用到了，但子节点还没有被垃圾回收器处理【目前正在处理这个节点】。")]),t._v(" "),n("li",[t._v("白色表示这个节点没有被访问到，如果本轮遍历结束，这个节点还是白色的，就表示这个数据是垃圾数据，对应的内存会被回收。")])]),t._v(" "),n("p",[t._v("这么看来也不复杂啊？为什么说增量回收要比全停顿复杂呢？这不是骗人吗？")]),t._v(" "),n("p",[t._v("其实不是的，让我们来想象一下，什么是失败的垃圾回收？其实无非就是两点：")]),t._v(" "),n("ul",[n("li",[t._v("不该回收还有用的内存被回收了")]),t._v(" "),n("li",[t._v("该回收的没被回收")])]),t._v(" "),n("p",[t._v("增量回收添加了一个约束条件：不能让黑色节点指向白色节点。通常使用写屏障(Write-barrier)机制来实现这个约束条件：当发生了黑色节点引用了白色节点的情况，写屏障会强制将被引用的白色节点变成灰色，这种方法也被成为强三色不变性。")]),t._v(" "),n("h3",{attrs:{id:"并发回收"}},[t._v("并发回收")]),t._v(" "),n("p",[t._v("虽然通过三色标记法和写屏障机制能够很好的实现增量垃圾回收，但是由于这些操作都是在主线程上执行的，那么当主线程繁忙的时候，增量回收操作依然会降低主线程处理任务的吞吐量（throughput）")]),t._v(" "),n("p",[t._v("这个时候需要并发回收机制了，所谓并发回收，就是指主线程在执行JavaScript的过程中，辅助线程能够在后台执行垃圾回收的操作。")]),t._v(" "),n("p",[t._v("并发回收的优势非常明显，主线程不会被挂起，JavaScript可以自由的执行，在执行的同时，辅助线程可以执行垃圾回收的操作。")]),t._v(" "),n("p",[t._v("与之相对的，并发回收是这三种技术中最难的一种，主要是由于下面的原因：")]),t._v(" "),n("ol",[n("li",[t._v("当主线程执行JavaScript时，堆中的内容随时可能发生变化，从而使得辅助线程之前做的工作无效")]),t._v(" "),n("li",[t._v("主线程和辅助线程可能会在同一时间修改同一个对象，为了避免产生这种问题，必须要额外实现读写锁等功能。")])]),t._v(" "),n("p",[t._v("尽管并发回收要额外解决上面两个问题，但是权衡利弊来说，这种方式的效率还是远高于其他方式的\nV8并不是单独的使用了上面说的某一种方式来实现垃圾回收，而是融合在一起使用")]),t._v(" "),n("ul",[n("li",[t._v("首先，主垃圾回收器主要采用了并发标记，在 JavaScript 在主线程上执行的时候，辅助线程已经开始执行标记操作了，也就是说，标记工作是在辅助线程上执行的。")]),t._v(" "),n("li",[t._v("标记完成之后，再执行整理操作，主线程在执行整理操作的同时，多个辅助线程也在执行整理操作")]),t._v(" "),n("li",[t._v("另外，主垃圾回收器还采用了增量标记的方式，整理任务会穿插在各个 JavaScript 任务之间执行。")])]),t._v(" "),n("h3",{attrs:{id:"关于引用计数垃圾回收的彩蛋"}},[t._v("关于引用计数垃圾回收的彩蛋")]),t._v(" "),n("p",[t._v("作为老一代浏览器垃圾回收策略，引用计数也是有优势的：")]),t._v(" "),n("ol",[n("li",[t._v("可以立即回收垃圾，因为每个对象都知道自己的引用计数，当变为 0 时就可以立即回收。")]),t._v(" "),n("li",[t._v("最大暂停时间短(因执行垃圾回收而暂停执行程序的最长时间)，因为只要程序更新指针时程序就会执行垃圾回收，内存管理的开销分布在整个应用程序执行期间，无需挂起应用程序的运行来做，因此消减了最大的暂停时间(但是增多了垃圾回收的次数)。")]),t._v(" "),n("li",[t._v("不需要沿指针查找。产生的垃圾会立即连接到空闲列表，所以不需要查找哪些对象时需要回收的。")])]),t._v(" "),n("p",[t._v("但是引用计数的问题却是致命的，可能会导致内存泄漏，所以现在流行的浏览器都没有采用引用计数的方式了，那么，引用计数为什么会可能造成内存泄漏这么严重的问题呢？")]),t._v(" "),n("p",[t._v("让我们看一个实例，在 IE6、7 中使用引用计数的方式对 DOM 对象进行垃圾回收，这种方式常常会造成对象被循环引用时内存发生泄漏：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" div"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nwindow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onload")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  div "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myDivElement'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  div"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("circularReference "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" div"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  div"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lotsOfData "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("在这个例子中，myDivElement 这个 DOM 中的 circularReference 属性引用了 myDivElement， 这样就造成了循环引用，如果这个属性没有被显式的移除或者设置为 null，计数器中的最小值永远是1，不可能为0。如果这个 DOM 元素拥有大量的数据(如上 lotsOfData 属性)，而这个数据占用的内存将永远都不会被释放，这就导致了内存泄漏。")])])}),[],!1,null,null,null);a.default=v.exports}}]);